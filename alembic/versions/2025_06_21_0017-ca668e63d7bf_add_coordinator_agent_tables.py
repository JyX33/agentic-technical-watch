"""Add coordinator agent tables

Revision ID: ca668e63d7bf
Revises: 8b74b7f8cc78
Create Date: 2025-06-21 00:17:30.306810

"""

from collections.abc import Sequence

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op
from reddit_watcher.models import JSONType

# revision identifiers, used by Alembic.
revision: str = "ca668e63d7bf"
down_revision: str | Sequence[str] | None = "8b74b7f8cc78"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "agent_tasks",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("workflow_id", sa.Integer(), nullable=False),
        sa.Column("agent_type", sa.String(length=100), nullable=False),
        sa.Column("task_type", sa.String(length=100), nullable=False),
        sa.Column("task_data", JSONType(), nullable=False),
        sa.Column("result_data", JSONType(), nullable=True),
        sa.Column("status", sa.String(length=50), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "workflow_executions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("topics", JSONType(), nullable=False),
        sa.Column("subreddits", JSONType(), nullable=False),
        sa.Column("status", sa.String(length=50), nullable=False),
        sa.Column("posts_processed", sa.Integer(), nullable=True),
        sa.Column("comments_processed", sa.Integer(), nullable=True),
        sa.Column("relevant_items", sa.Integer(), nullable=True),
        sa.Column("summaries_created", sa.Integer(), nullable=True),
        sa.Column("alerts_sent", sa.Integer(), nullable=True),
        sa.Column("error_message", sa.Text(), nullable=True),
        sa.Column(
            "started_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.add_column(
        "reddit_comments", sa.Column("comment_id", sa.String(length=20), nullable=False)
    )
    op.add_column(
        "reddit_comments", sa.Column("parent_id", sa.String(length=20), nullable=True)
    )
    op.add_column(
        "reddit_comments", sa.Column("permalink", sa.String(length=500), nullable=True)
    )
    op.add_column(
        "reddit_comments", sa.Column("post_fk_id", sa.Integer(), nullable=True)
    )
    op.add_column(
        "reddit_comments", sa.Column("subreddit_fk_id", sa.Integer(), nullable=True)
    )
    op.add_column(
        "reddit_comments",
        sa.Column("parent_comment_fk_id", sa.Integer(), nullable=True),
    )
    op.alter_column(
        "reddit_comments",
        "post_id",
        existing_type=sa.INTEGER(),
        type_=sa.String(length=20),
        nullable=False,
    )
    op.drop_constraint(
        op.f("reddit_comments_reddit_id_key"), "reddit_comments", type_="unique"
    )
    op.create_unique_constraint(None, "reddit_comments", ["comment_id"])
    op.drop_constraint(
        op.f("reddit_comments_subreddit_id_fkey"), "reddit_comments", type_="foreignkey"
    )
    op.drop_constraint(
        op.f("reddit_comments_parent_comment_id_fkey"),
        "reddit_comments",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("reddit_comments_post_id_fkey"), "reddit_comments", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "reddit_comments", "reddit_posts", ["post_fk_id"], ["id"]
    )
    op.create_foreign_key(
        None, "reddit_comments", "reddit_comments", ["parent_comment_fk_id"], ["id"]
    )
    op.create_foreign_key(
        None, "reddit_comments", "subreddits", ["subreddit_fk_id"], ["id"]
    )
    op.drop_column("reddit_comments", "subreddit_id")
    op.drop_column("reddit_comments", "parent_comment_id")
    op.drop_column("reddit_comments", "reddit_id")
    op.add_column(
        "reddit_posts", sa.Column("post_id", sa.String(length=20), nullable=False)
    )
    op.add_column("reddit_posts", sa.Column("is_self", sa.Boolean(), nullable=False))
    op.add_column("reddit_posts", sa.Column("is_video", sa.Boolean(), nullable=False))
    op.add_column("reddit_posts", sa.Column("over_18", sa.Boolean(), nullable=False))
    op.add_column(
        "reddit_posts", sa.Column("permalink", sa.String(length=500), nullable=True)
    )
    op.add_column(
        "reddit_posts", sa.Column("topic", sa.String(length=200), nullable=True)
    )
    op.add_column(
        "reddit_posts",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
    )
    op.add_column(
        "reddit_posts", sa.Column("subreddit_fk_id", sa.Integer(), nullable=True)
    )
    op.drop_constraint(
        op.f("reddit_posts_reddit_id_key"), "reddit_posts", type_="unique"
    )
    op.create_unique_constraint(None, "reddit_posts", ["post_id"])
    op.drop_constraint(
        op.f("reddit_posts_subreddit_id_fkey"), "reddit_posts", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "reddit_posts", "subreddits", ["subreddit_fk_id"], ["id"]
    )
    op.drop_column("reddit_posts", "subreddit_id")
    op.drop_column("reddit_posts", "retrieved_at")
    op.drop_column("reddit_posts", "reddit_id")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "reddit_posts",
        sa.Column(
            "reddit_id", sa.VARCHAR(length=20), autoincrement=False, nullable=False
        ),
    )
    op.add_column(
        "reddit_posts",
        sa.Column(
            "retrieved_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "reddit_posts",
        sa.Column("subreddit_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "reddit_posts", type_="foreignkey")
    op.create_foreign_key(
        op.f("reddit_posts_subreddit_id_fkey"),
        "reddit_posts",
        "subreddits",
        ["subreddit_id"],
        ["id"],
    )
    op.drop_constraint(None, "reddit_posts", type_="unique")
    op.create_unique_constraint(
        op.f("reddit_posts_reddit_id_key"),
        "reddit_posts",
        ["reddit_id"],
        postgresql_nulls_not_distinct=False,
    )
    op.drop_column("reddit_posts", "subreddit_fk_id")
    op.drop_column("reddit_posts", "created_at")
    op.drop_column("reddit_posts", "topic")
    op.drop_column("reddit_posts", "permalink")
    op.drop_column("reddit_posts", "over_18")
    op.drop_column("reddit_posts", "is_video")
    op.drop_column("reddit_posts", "is_self")
    op.drop_column("reddit_posts", "post_id")
    op.add_column(
        "reddit_comments",
        sa.Column(
            "reddit_id", sa.VARCHAR(length=20), autoincrement=False, nullable=False
        ),
    )
    op.add_column(
        "reddit_comments",
        sa.Column(
            "parent_comment_id", sa.INTEGER(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "reddit_comments",
        sa.Column("subreddit_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "reddit_comments", type_="foreignkey")
    op.drop_constraint(None, "reddit_comments", type_="foreignkey")
    op.drop_constraint(None, "reddit_comments", type_="foreignkey")
    op.create_foreign_key(
        op.f("reddit_comments_post_id_fkey"),
        "reddit_comments",
        "reddit_posts",
        ["post_id"],
        ["id"],
    )
    op.create_foreign_key(
        op.f("reddit_comments_parent_comment_id_fkey"),
        "reddit_comments",
        "reddit_comments",
        ["parent_comment_id"],
        ["id"],
    )
    op.create_foreign_key(
        op.f("reddit_comments_subreddit_id_fkey"),
        "reddit_comments",
        "subreddits",
        ["subreddit_id"],
        ["id"],
    )
    op.drop_constraint(None, "reddit_comments", type_="unique")
    op.create_unique_constraint(
        op.f("reddit_comments_reddit_id_key"),
        "reddit_comments",
        ["reddit_id"],
        postgresql_nulls_not_distinct=False,
    )
    op.alter_column(
        "reddit_comments",
        "post_id",
        existing_type=sa.String(length=20),
        type_=sa.INTEGER(),
        nullable=True,
    )
    op.drop_column("reddit_comments", "parent_comment_fk_id")
    op.drop_column("reddit_comments", "subreddit_fk_id")
    op.drop_column("reddit_comments", "post_fk_id")
    op.drop_column("reddit_comments", "permalink")
    op.drop_column("reddit_comments", "parent_id")
    op.drop_column("reddit_comments", "comment_id")
    op.drop_table("workflow_executions")
    op.drop_table("agent_tasks")
    # ### end Alembic commands ###
