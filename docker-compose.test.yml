# ABOUTME: Docker Compose configuration for integration testing
# ABOUTME: Provides isolated test environment for A2A agent communication testing

services:
  # Test PostgreSQL database - isolated from production
  test-db:
    image: postgres:15
    environment:
      POSTGRES_DB: reddit_watcher_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    tmpfs:
      - /var/lib/postgresql/data  # In-memory for faster tests
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Test Redis - isolated from production
  test-redis:
    image: redis:7
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    tmpfs:
      - /data  # In-memory for faster tests
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3

  # Mock Reddit API server for testing
  mock-reddit-api:
    build:
      context: .
      dockerfile: tests/docker/Dockerfile.mock-reddit
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 5s
      timeout: 3s
      retries: 3

  # Mock Gemini API server for testing
  mock-gemini-api:
    build:
      context: .
      dockerfile: tests/docker/Dockerfile.mock-gemini
    ports:
      - "8081:8081"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 5s
      timeout: 3s
      retries: 3

  # A2A Test Agents - same as production but with test configuration
  test-retrieval-agent:
    build: .
    environment:
      - DATABASE_URL=postgresql://test_user:test_password@test-db:5432/reddit_watcher_test
      - REDIS_URL=redis://test-redis:6379/0
      - AGENT_TYPE=retrieval
      - A2A_PORT=8001
      - REDDIT_BASE_URL=http://mock-reddit-api:8080  # Use mock API
      - TEST_MODE=true
    ports:
      - "8101:8001"  # Different ports for test isolation
    depends_on:
      test-db:
        condition: service_healthy
      test-redis:
        condition: service_healthy
      mock-reddit-api:
        condition: service_healthy
    command: ["python", "-m", "reddit_watcher.agents.retrieval_agent"]
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8001/health').read()"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  test-filter-agent:
    build: .
    environment:
      - DATABASE_URL=postgresql://test_user:test_password@test-db:5432/reddit_watcher_test
      - REDIS_URL=redis://test-redis:6379/0
      - AGENT_TYPE=filter
      - A2A_PORT=8002
      - TEST_MODE=true
    ports:
      - "8102:8002"
    depends_on:
      test-db:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    command: ["python", "-m", "reddit_watcher.agents.filter_agent"]
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8002/health').read()"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  test-summarise-agent:
    build: .
    environment:
      - DATABASE_URL=postgresql://test_user:test_password@test-db:5432/reddit_watcher_test
      - REDIS_URL=redis://test-redis:6379/0
      - AGENT_TYPE=summarise
      - A2A_PORT=8003
      - GEMINI_BASE_URL=http://mock-gemini-api:8081  # Use mock API
      - TEST_MODE=true
    ports:
      - "8103:8003"
    depends_on:
      test-db:
        condition: service_healthy
      test-redis:
        condition: service_healthy
      mock-gemini-api:
        condition: service_healthy
    command: ["python", "-m", "reddit_watcher.agents.summarise_agent"]
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8003/health').read()"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  test-alert-agent:
    build: .
    environment:
      - DATABASE_URL=postgresql://test_user:test_password@test-db:5432/reddit_watcher_test
      - REDIS_URL=redis://test-redis:6379/0
      - AGENT_TYPE=alert
      - A2A_PORT=8004
      - TEST_MODE=true
      - SLACK_WEBHOOK_URL=http://mock-slack:8082/webhook  # Mock webhook
    ports:
      - "8104:8004"
    depends_on:
      test-db:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    command: ["python", "-m", "reddit_watcher.agents.alert_agent"]
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8004/health').read()"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  test-coordinator-agent:
    build: .
    environment:
      - DATABASE_URL=postgresql://test_user:test_password@test-db:5432/reddit_watcher_test
      - REDIS_URL=redis://test-redis:6379/0
      - AGENT_TYPE=coordinator
      - A2A_PORT=8000
      - TEST_MODE=true
    ports:
      - "8100:8000"
    depends_on:
      test-db:
        condition: service_healthy
      test-redis:
        condition: service_healthy
      test-retrieval-agent:
        condition: service_healthy
      test-filter-agent:
        condition: service_healthy
      test-summarise-agent:
        condition: service_healthy
      test-alert-agent:
        condition: service_healthy
    command: ["python", "-m", "reddit_watcher.agents.coordinator_agent"]
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health').read()"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Mock Slack webhook server
  mock-slack:
    build:
      context: .
      dockerfile: tests/docker/Dockerfile.mock-slack
    ports:
      - "8082:8082"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 5s
      timeout: 3s
      retries: 3

  # Integration test runner
  integration-tests:
    build: .
    environment:
      - DATABASE_URL=postgresql://test_user:test_password@test-db:5432/reddit_watcher_test
      - REDIS_URL=redis://test-redis:6379/0
      - TEST_MODE=true
      - COORDINATOR_URL=http://test-coordinator-agent:8000
      - RETRIEVAL_URL=http://test-retrieval-agent:8001
      - FILTER_URL=http://test-filter-agent:8002
      - SUMMARISE_URL=http://test-summarise-agent:8003
      - ALERT_URL=http://test-alert-agent:8004
    depends_on:
      test-coordinator-agent:
        condition: service_healthy
    command: ["python", "-m", "pytest", "tests/integration/", "-v", "--tb=short"]
    volumes:
      - ./tests/integration:/app/tests/integration
      - ./tests/fixtures:/app/tests/fixtures
