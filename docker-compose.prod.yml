# ABOUTME: Production Docker Compose configuration for Reddit Technical Watcher
# ABOUTME: Optimized for production deployment with comprehensive monitoring, security, and resource management

services:
  # PostgreSQL database with production-optimized configuration
  db:
    image: postgres:15-alpine
    container_name: reddit_watcher_db_prod
    environment:
      POSTGRES_DB: ${DB_NAME:-reddit_watcher}
      POSTGRES_USER: ${DB_USER:-reddit_watcher_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:?Database password required}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
      # Production PostgreSQL optimizations
      POSTGRES_SHARED_BUFFERS: ${POSTGRES_SHARED_BUFFERS:-256MB}
      POSTGRES_EFFECTIVE_CACHE_SIZE: ${POSTGRES_EFFECTIVE_CACHE_SIZE:-1GB}
      POSTGRES_MAINTENANCE_WORK_MEM: ${POSTGRES_MAINTENANCE_WORK_MEM:-64MB}
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: ${POSTGRES_CHECKPOINT_COMPLETION_TARGET:-0.9}
      POSTGRES_WAL_BUFFERS: ${POSTGRES_WAL_BUFFERS:-16MB}
      POSTGRES_DEFAULT_STATISTICS_TARGET: ${POSTGRES_DEFAULT_STATISTICS_TARGET:-100}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./backups:/backups
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-reddit_watcher_user} -d ${DB_NAME:-reddit_watcher}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    labels:
      - "traefik.enable=false"
      - "monitoring.enabled=true"
      - "monitoring.type=database"

  # Redis for A2A service discovery with production security
  redis:
    image: redis:7-alpine
    container_name: reddit_watcher_redis_prod
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:?Redis password required}
      --appendonly yes
      --save 60 1000
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 0
      --tcp-backlog 511
      --databases 16
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - internal
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
    labels:
      - "traefik.enable=false"
      - "monitoring.enabled=true"
      - "monitoring.type=cache"

  # Coordinator Agent - Main orchestrator
  coordinator-agent:
    build:
      context: .
      target: runtime
    container_name: reddit_watcher_coordinator_prod
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${DB_USER:-reddit_watcher_user}:${DB_PASSWORD}@db:5432/${DB_NAME:-reddit_watcher}
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379/0
      - AGENT_TYPE=coordinator
      - AGENT_PORT=8000
      - A2A_API_KEY=${A2A_API_KEY:?API key required}
      - A2A_HOST=0.0.0.0
      - RETRIEVAL_AGENT_URL=http://retrieval-agent:8001
      - FILTER_AGENT_URL=http://filter-agent:8002
      - SUMMARISE_AGENT_URL=http://summarise-agent:8003
      - ALERT_AGENT_URL=http://alert-agent:8004
      - MONITORING_TOPICS=${MONITORING_TOPICS:-Claude Code}
      - MONITORING_INTERVAL_HOURS=${MONITORING_INTERVAL_HOURS:-4}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONUNBUFFERED=1
    networks:
      - internal
      - external
    ports:
      - "${COORDINATOR_PORT:-8000}:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.75'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache
    user: "1000:1000"
    command: ["python", "-m", "reddit_watcher.agents.coordinator"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.coordinator.rule=Host(`coordinator.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.coordinator.tls=true"
      - "traefik.http.services.coordinator.loadbalancer.server.port=8000"
      - "monitoring.enabled=true"
      - "monitoring.type=agent"
      - "monitoring.role=coordinator"

  # Retrieval Agent - Reddit data collection
  retrieval-agent:
    build:
      context: .
      target: runtime
    container_name: reddit_watcher_retrieval_prod
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${DB_USER:-reddit_watcher_user}:${DB_PASSWORD}@db:5432/${DB_NAME:-reddit_watcher}
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379/0
      - AGENT_TYPE=retrieval
      - AGENT_PORT=8001
      - A2A_API_KEY=${A2A_API_KEY:?API key required}
      - A2A_HOST=0.0.0.0
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID:?Reddit client ID required}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET:?Reddit client secret required}
      - REDDIT_USER_AGENT=${REDDIT_USER_AGENT:-Reddit Technical Watcher v1.0.0}
      - REDDIT_RATE_LIMIT=${REDDIT_RATE_LIMIT:-100}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONUNBUFFERED=1
    networks:
      - internal
      - external
    ports:
      - "${RETRIEVAL_PORT:-8001}:8001"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.75'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache
    user: "1000:1000"
    command: ["python", "-m", "reddit_watcher.agents.retrieval"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    labels:
      - "traefik.enable=false"
      - "monitoring.enabled=true"
      - "monitoring.type=agent"
      - "monitoring.role=retrieval"

  # Filter Agent - Content relevance filtering
  filter-agent:
    build:
      context: .
      target: runtime
    container_name: reddit_watcher_filter_prod
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${DB_USER:-reddit_watcher_user}:${DB_PASSWORD}@db:5432/${DB_NAME:-reddit_watcher}
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379/0
      - AGENT_TYPE=filter
      - AGENT_PORT=8002
      - A2A_API_KEY=${A2A_API_KEY:?API key required}
      - A2A_HOST=0.0.0.0
      - GEMINI_API_KEY=${GEMINI_API_KEY:?Gemini API key required}
      - GEMINI_MODEL_PRIMARY=${GEMINI_MODEL_PRIMARY:-gemini-2.5-flash-lite-preview-06-17}
      - GEMINI_MODEL_FALLBACK=${GEMINI_MODEL_FALLBACK:-gemini-2.5-flash}
      - RELEVANCE_THRESHOLD=${RELEVANCE_THRESHOLD:-0.7}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONUNBUFFERED=1
    networks:
      - internal
      - external
    ports:
      - "${FILTER_PORT:-8002}:8002"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.75'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache
    user: "1000:1000"
    command: ["python", "-m", "reddit_watcher.agents.filtering"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    labels:
      - "traefik.enable=false"
      - "monitoring.enabled=true"
      - "monitoring.type=agent"
      - "monitoring.role=filter"

  # Summarise Agent - AI content summarization
  summarise-agent:
    build:
      context: .
      target: runtime
    container_name: reddit_watcher_summarise_prod
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${DB_USER:-reddit_watcher_user}:${DB_PASSWORD}@db:5432/${DB_NAME:-reddit_watcher}
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379/0
      - AGENT_TYPE=summarise
      - AGENT_PORT=8003
      - A2A_API_KEY=${A2A_API_KEY:?API key required}
      - A2A_HOST=0.0.0.0
      - GEMINI_API_KEY=${GEMINI_API_KEY:?Gemini API key required}
      - GEMINI_MODEL_PRIMARY=${GEMINI_MODEL_PRIMARY:-gemini-2.5-flash-lite-preview-06-17}
      - GEMINI_MODEL_FALLBACK=${GEMINI_MODEL_FALLBACK:-gemini-2.5-flash}
      - GEMINI_RATE_LIMIT=${GEMINI_RATE_LIMIT:-100}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONUNBUFFERED=1
    networks:
      - internal
      - external
    ports:
      - "${SUMMARISE_PORT:-8003}:8003"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.75'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache
    user: "1000:1000"
    command: ["python", "-m", "reddit_watcher.agents.summarise"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    labels:
      - "traefik.enable=false"
      - "monitoring.enabled=true"
      - "monitoring.type=agent"
      - "monitoring.role=summarise"

  # Alert Agent - Notifications and alerting
  alert-agent:
    build:
      context: .
      target: runtime
    container_name: reddit_watcher_alert_prod
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${DB_USER:-reddit_watcher_user}:${DB_PASSWORD}@db:5432/${DB_NAME:-reddit_watcher}
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379/0
      - AGENT_TYPE=alert
      - AGENT_PORT=8004
      - A2A_API_KEY=${A2A_API_KEY:?API key required}
      - A2A_HOST=0.0.0.0
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_USE_TLS=${SMTP_USE_TLS:-true}
      - EMAIL_RECIPIENTS=${EMAIL_RECIPIENTS}
      - ALERT_EMAIL=${ALERT_EMAIL}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONUNBUFFERED=1
    networks:
      - internal
      - external
    ports:
      - "${ALERT_PORT:-8004}:8004"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache
    user: "1000:1000"
    command: ["python", "-m", "reddit_watcher.agents.alerting"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    labels:
      - "traefik.enable=false"
      - "monitoring.enabled=true"
      - "monitoring.type=agent"
      - "monitoring.role=alert"

  # Monitoring and Observability Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: reddit_watcher_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - internal
      - monitoring
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  grafana:
    image: grafana/grafana:latest
    container_name: reddit_watcher_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:?Grafana admin password required}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
      - GF_SECURITY_CONTENT_SECURITY_POLICY=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - monitoring
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # Alertmanager for alert routing
  alertmanager:
    image: prom/alertmanager:latest
    container_name: reddit_watcher_alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.advertise-address=0.0.0.0:9093'
    volumes:
      - ./docker/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    networks:
      - monitoring
    ports:
      - "${ALERTMANAGER_PORT:-9093}:9093"
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.alertmanager.rule=Host(`alertmanager.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.alertmanager.tls=true"
      - "traefik.http.services.alertmanager.loadbalancer.server.port=9093"

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: reddit_watcher_node_exporter
    command:
      - '--path.rootfs=/host'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /:/host:ro,rslave
    networks:
      - monitoring
    ports:
      - "${NODE_EXPORTER_PORT:-9100}:9100"
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    pid: host

  # Reverse Proxy with SSL termination
  traefik:
    image: traefik:v3.0
    container_name: reddit_watcher_traefik
    command:
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:?ACME email required}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--log.level=INFO"
      - "--accesslog=true"
    ports:
      - "80:80"
      - "443:443"
      - "${TRAEFIK_DASHBOARD_PORT:-8080}:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_certs:/letsencrypt
    networks:
      - external
      - monitoring
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.service=api@internal"

networks:
  # Internal network for secure service-to-service communication
  internal:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: reddit_watcher_internal
      com.docker.network.bridge.enable_ip_masquerade: "false"

  # External network for services requiring internet access
  external:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16
    driver_opts:
      com.docker.network.bridge.name: reddit_watcher_external

  # Monitoring network for observability stack
  monitoring:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.22.0.0/16
    driver_opts:
      com.docker.network.bridge.name: reddit_watcher_monitoring

volumes:
  # Persistent data volumes with proper permissions
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres

  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/redis

  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/prometheus

  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/grafana

  alertmanager_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/alertmanager

  traefik_certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/traefik
